#ifndef SCHEDULER_ALGORITHMS_H_
#define SCHEDULER_ALGORITHMS_H_

/*                                                                            */
/* File Name..........: ~/ucare/scheduler/algorithms.h 
 * Author.............: Bjorn Barrefors
 * Institution........: University of Nebraska-Lincoln
 * ...................: Department of Computer Science and Engineering
 * Date Written.......: October 22, 2012
 * Date Last Modified.: April 15, 2013
 * Language...........: C++
 * Purpose............: Find solution for task scheduling on a heterogeneous
 * ...................: multi-core multiprocessor real-time system obeying
 * ...................: both thermal constraint and deadline using a hybrid
 * ...................: min-core worst-fit and genetic algorithm.
 * Brief Description..: We first generate a task set.
 * ...................: A possible solution to the problem is found using
 * ...................: min-core worst-fit algorithm.
 * ...................: This solution is one chromosome for the genetic
 * ...................: algorithm, rest of the chromosomes are randomly
 * ...................: generated.
 * ...................: Run the genetic algorithm x number of times or until
 * ...................: a good enough solution is found.
 * Improvements.......: 1. Scheduler.
 * ...................: 1.2. Program computer model.
 * ...................: 1.3. Encode a chromosome which corresponds to the
 * ...................: solution generated by Min-Core Worst-Fit algorithm.
 * ...................: 1.4. Randomly generate rest of initial population.
 * ...................: 1.5. Call Genetic algorithm.
 */

#include "task_set.h"
#include "cluster.h"
#include "population.h"

#include <cstdio>
#include <random>

class Algorithms {
 public:
  Algorithms( double total_utilization, int num_tasks, int population_size ) {
    population_size_ = population_size;
    max_elite_ = population_size_ * 0.01;
    num_tasks_ = num_tasks;
    max_mutation_ = num_tasks_ * 0.005;
    max_crossover_ = num_tasks_ * 0.85;
    task_set_ = new TaskSet( total_utilization, num_tasks_ );
    task_set_->Generate( );
    cluster_ = new Cluster( );
    population_ = new Population( population_size_, num_tasks_ );
  }
  
  ~Algorithms( ) {
    delete cluster_;
    delete population_;
    delete task_set_;
  }
  
  void WorstFit( );
  
  void Genetic( );

  void GeneticInit( );
  
  void HybridWGA( );
  
  void Print( );
  
 private:
  static const int num_processors_ = 8;
  static const int max_conv_ = 10;
  static const int max_gen_ = 1000;
  int max_mutation_;
  int max_crossover_;
  int max_elite_;
  int num_tasks_;
  int population_size_;
  Cluster *cluster_;
  Population *population_;
  TaskSet *task_set_;
};

#endif  /* SCHEDULER_ALGORITHMS_H_ */
